

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.util.StringTokenizer;

  /**
	 * 递归获取文件夹内所有文件,还少了排除文件,多个文件后缀名
	 * @param fullPath 文件夹路径全名
	 * @param list 保存文件的数组
	 */
	public void getFolderFiles(String fullPath,List<File> list) {
        File file = new File(fullPath);
        if (file.isDirectory()) {//必须是文件夹
            File[] files = file.listFiles();
            if (files.length == 0) {//文件夹是空的
                return;
            } else {
                for (File file2 : files) {
                    if (file2.isDirectory()) {
                    	getFolderFiles(file2.getAbsolutePath(),list);
                    } else {
                        list.add(file2);
                    }
                }
            }
        } else {
            System.out.println("文件不存在!");
        }
    }
    
    /**
	 * 读取文本文件信息
	 * 
	 * @param filePathAndName
	 *            文件名
	 * @param encoding
	 *            字符集
	 * @return 文件内容
	 * @throws IOException
	 */
	public String readTxt(String filePathAndName, String encoding) throws IOException {
		encoding = encoding.trim();
		StringBuffer str = new StringBuffer("");
		String st = "";
		try {
			FileInputStream fs = new FileInputStream(filePathAndName);
			InputStreamReader isr;
			if (encoding.equals("")) {
				isr = new InputStreamReader(fs);
			} else {
				isr = new InputStreamReader(fs, encoding);
			}
			BufferedReader br = new BufferedReader(isr);
			try {
				String data = "";
				while ((data = br.readLine()) != null) {
					if (data.trim().length() > 0) {
						str.append(data + "\r\n");
					}
				}
			} catch (Exception e) {
				str.append(e.toString());
			}
			st = str.toString();
		} catch (IOException es) {
			st = "";
		}
		return st;
	}
  
  /**
	 * 创建文件夹
	 * 
	 * @param folderPath
	 *            文件夹名称
	 * @return 文件夹名称
	 */
	public String createFolder(String folderPath) {
		String txt = folderPath;
		try {
			java.io.File myFilePath = new java.io.File(txt);
			txt = folderPath;
			if (!myFilePath.exists()) {
				myFilePath.mkdirs();
			}
		} catch (Exception e) {
			message = "";
		}
		return txt;
	}
  /**
	 * 创建新的文本文件
	 * 
	 * @param filePathAndName
	 *            文件路径名称
	 * @param fileContent
	 *            文件内容
	 * @param encoding
	 *            字符集
	 */
	public void createFile(String filePathAndName, String fileContent, String encoding) {
		try {
			String filePath = filePathAndName;
			filePath = filePath.toString();
			File myFilePath = new File(filePath);
			if (!myFilePath.exists()) {
				myFilePath.createNewFile();
			}
			PrintWriter myFile = new PrintWriter(myFilePath, encoding);
			String strContent = fileContent;
			myFile.println(strContent);
			myFile.close();
		} catch (Exception e) {
			message = "";
		}
	}
  /**
	 * 删除文件
	 * 
	 * @param filePathAndName
	 *            文件名
	 * @return boolean
	 */
	public boolean delFile(String filePathAndName) {
		boolean bea = false;
		try {
			String filePath = filePathAndName;
			File myDelFile = new File(filePath);
			if (myDelFile.exists()) {
				myDelFile.delete();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return bea;
	}
  /**
	 * 拷贝文件
	 * 
	 * @param oldPathFile
	 *            源文件名
	 * @param newPathFile
	 *            目标文件名
	 */
	public void copyFile(String oldPathFile, String newPathFile) {
		InputStream inStream = null;
		FileOutputStream fs = null;
		try {
			int bytesum = 0;
			int byteread = 0;
			File oldfile = new File(oldPathFile);
			if (oldfile.exists()) {
				inStream = new FileInputStream(oldPathFile);
				fs = new FileOutputStream(newPathFile);
				byte[] buffer = new byte[1444];
				while ((byteread = inStream.read(buffer)) != -1) {
					bytesum += byteread;
					fs.write(buffer, 0, byteread);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (inStream != null) {
					inStream.close();
				}
			} catch (Exception ex1) {
				ex1.printStackTrace();
			}
			try {
				if (fs != null) {
					fs.close();
				}
			} catch (Exception ex1) {
				ex1.printStackTrace();
			}
		}
	}
  /**
	 * 移动文件
	 * 
	 * @param oldPath
	 *            源文件名称
	 * @param newPath
	 *            目标文件名称
	 */
	public void moveFile(String oldPath, String newPath) {
		copyFile(oldPath, newPath);
		delFile(oldPath);
	}
  /**
	 * 获取单个文件的MD5值！
	 * 
	 * @param file
	 * @return
	 */
	public static String getFileMD5(File file) {
		if (!file.isFile()) {
			return null;
		}
		MessageDigest digest = null;
		FileInputStream in = null;
		byte buffer[] = new byte[1024];
		int len;
		try {
			digest = MessageDigest.getInstance("MD5");
			in = new FileInputStream(file);
			while ((len = in.read(buffer, 0, 1024)) != -1) {
				digest.update(buffer, 0, len);
			}
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		BigInteger bigInt = new BigInteger(1, digest.digest());
		return bigInt.toString(16);
	}
}
