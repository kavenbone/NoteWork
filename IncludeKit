import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class IncludeKit {

	public static void main(String[] args) {
		
	}
	
	/**
	 * 
	 * @param pathOld 原文件夹位置
	 * @param pathNew 生成文件夹位置
	 * @param dataOld 查找的数据
	 * @param dataNew 替换为新的数据
	 * @return 1成功,0失败
	 */
	public int replaceInclude(String pathOld,String pathNew,String dataOld,String dataNew){
		FileKit kit=new FileKit();
		List<File> list=new ArrayList<File>();
		kit.getFolderFiles(pathOld, list);//获取所有文件
		
		int state=0;
		
		//循环替换所有文件
		int len=0;
		if(list!=null){
			len=list.size();
		}
		
		for(int i=0;i<len;i++){//循环替换所有文件
			File file=list.get(i);
			String fileAbsolutePath=file.getAbsolutePath();
			
			//有问题
			//排除.svn
			if(fileAbsolutePath.indexOf(".svn")>-1){
				continue;
			}
			
			//有问题,这句应该做成接口
			state=replaceIncludeOne(fileAbsolutePath, file.getParent()+"\\"+file.getName(), dataOld, dataNew);
			if(state==0){
				break;
			}
		}
		
		return state;
	}
	
	/**
	 * 替换单个文件中的内容
	 * @param pathOld 原文件路径全名
	 * @param pathNew 生成文件路径全名
	 * @param dataOld 查找的数据
	 * @param dataNew 替换为新的数据
	 * @return 1成功,0失败
	 */
	private int replaceIncludeOne(String pathOld,String pathNew,String dataOld,String dataNew){
		FileKit kit=new FileKit();
		try {
			String encoding="utf-8";
			String text=kit.readTxt(pathOld,encoding);//读取
			
			//防止没有也修改
			if(text.indexOf(dataOld)<0){
				return 1;
			}
			
			text=text.replaceAll(dataOld, dataNew);//替换所有
			
			kit.createFile(pathNew, text, encoding);//生成
			return 1;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return 0;
		}
	}
}
